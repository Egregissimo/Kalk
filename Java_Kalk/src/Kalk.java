import dati.*;
import tree.*;

public class Kalk {

	public static void main(String[] args) {
		System.out.println("Verifica classe Raz");
		Raz r=new Raz();
		Raz a=new Raz(2);
		Raz b=new Raz(2, 8);
		Raz c=new Raz(3.2);
		Raz d=new Raz(2.4, 5);
		System.out.println("Razionale r: "+r);
		System.out.println("Razionale a: "+a);
		System.out.println("Razionale b: "+b);
		System.out.println("Razionale c: "+c);
		System.out.println("Razionale d: "+d);
		
		System.out.println("Reciproco di d: "+Raz.inverso(d));
		System.out.println("c*d: "+c.moltiplicazione(d));
		System.out.println("c/d: "+c.divisione(d));
		System.out.println("Implementazione metodi astratti:");
		System.out.println("b+c: "+b.somma(c));
		System.out.println("b-c: "+b.differenza(c));
		System.out.println("b*4: "+b.moltiplicazione(4));
		System.out.println("b/2: "+b.divisione(2));
		System.out.println("b==a: "+b.equals(a));
		System.out.println("b<c: "+b.min(c));
		
		System.out.println("\nVerifica classe Bin:");
		Bin e=new Bin();
		Bin f=new Bin(11);
		Bin g=new Bin(2);
		System.out.println("Binario e: "+e);
		System.out.println("Binario f: "+f);
		System.out.println("Binario g: "+g);
		System.out.println("f in base 10: "+f.base10());
		System.out.println("f in base 16: "+f.base16());
		System.out.println("f*g: "+f.moltiplicazione(g));
		System.out.println("f/f: "+f.divisione(f));
		System.out.println("Implementazione metodi astratti:");
		System.out.println("f*2: "+f.moltiplicazione(2));
		System.out.println("g/2: "+g.divisione(2));
		System.out.println("f+g: "+f.somma(g));
		System.out.println("f-g: "+f.differenza(g));
		System.out.println("f==g: "+f.equals(g));
		System.out.println("f<g: "+f.min(g));
		
		System.out.println("\nVerifica classe Vet.");
		Vet h=new Vet();
		Vet i=new Vet(3);
		Vet j=new Vet(3,2);
		int[] k= {1,2,3,4,5,6};
		Vet l=new Vet(k, 3, 2);
		Vet m=new Vet(k, 3);
		Vet n=new Vet(k);
		System.out.println("Matrice h: "+h);
		System.out.println("Matrice i: "+i);
		System.out.println("Matrice j: "+j);
		System.out.println("Matrice l: "+l);
		System.out.println("Matrice m: "+m);
		System.out.println("Matrice n: "+n);
		l.trasposed();
		System.out.println("Matrice l-trasposta (da ora in avanti): "+l);
		System.out.println("Norma di l: "+l.norma());
		System.out.println("l*m: "+l.moltiplicazione(m));
		Vet o=new Vet(k, 2, 3);
		System.out.println("Matrice o: "+o);
		System.out.println("Implementazione metodi astratti:");
		System.out.println("l+o: "+l.somma(o));
		System.out.println("l-o: "+l.differenza(o));
		System.out.println("l*2: "+l.moltiplicazione(2));
		System.out.println("l/2: "+l.divisione(2));
		System.out.println("l==o: "+l.equals(o));
		System.out.println("l<o: "+l.min(o));
		
		System.out.println("\nVerifica classe Binarytree:");
		Raz p=new Raz(-2, 7);
		Raz q=new Raz(5.3);
		Raz s=new Raz(8.2, 4.1);
		Raz t=new Raz(-10, 22);
		Raz u=new Raz(-8, -15);
		System.out.println("Razionale p: "+p);
		System.out.println("Razionale q: "+q);
		System.out.println("Razionale s: "+s);
		System.out.println("Razionale t: "+t);
		System.out.println("Razionale u: "+u);
		String ss=new String("(*,(*,(*,_,_),_),(*,_,(*,_,_)))");
		System.out.println("Struttura albero v: "+ss);
		Tipo[] tt= {p,q,s,t,u};
		Binarytree v=new Binarytree(tt, ss);
		Binarytree vv=new Binarytree();
		System.out.println("Albero binario v: "+v);
		System.out.println("Albero binario vv: "+vv);
		System.out.println("Cerca l'elemento nel percorso 00: "+v.cerca("00"));
		System.out.println("Implementazione metodi astratti:");
		v.add(a);
		System.out.println("Aggiungo il razionale 'a' a 'v': "+v);
		System.out.println("Rimuovo l'elemento nel percorso 1 da v che e': "+v.remove("1"));
		System.out.println("v col nodo rimosso: "+v);
		System.out.println("Rimuovo l'elemento a da v che e': "+v.remove(a));
		System.out.println("v col nodo rimosso: "+v);
		System.out.println("Cerca l'elemento p: "+v.search(p));
		String sss=new String("(*,(*,(*,_,_),(*,_,_)),(*,_,_))");
		Tipo[] ttt= {r,a,b,c,d};
		Binarytree vvv=new Binarytree(ttt, sss);
		System.out.println("Albero binario vvv: "+vvv);
		System.out.println("Albero binario vv: "+vv);
		System.out.println("vv+vvv: "+vv.somma(vvv));
		System.out.println("vv-vvv: "+vv.differenza(vvv));
		System.out.println("Albero binario v: "+v);
		System.out.println("v*2: "+v.moltiplicazione(2));
		System.out.println("v/3: "+v.divisione(3));
		
		System.out.println("\nVerifica classe Binarytreesearch:");
		System.out.println("Struttura albero z: "+ss);
		Binarytreesearch z=new Binarytreesearch(tt, ss);
		Binarytreesearch zz=new Binarytreesearch();
		System.out.println("Albero binario di ricerca z: "+z);
		System.out.println("Albero binario di ricerca zz: "+zz);
		System.out.println("Cerca l'elemento nel percorso 00: "+z.cerca("00"));
		System.out.println("z bilanciato: "+z.balance());
		System.out.println("Implementazione metodi astratti:");
		z.add(a);
		System.out.println("Aggiungo il razionale 'a' a 'z': "+z);
		System.out.println("Rimuovo l'elemento nel percorso 1 da z che e': "+z.remove("1"));
		System.out.println("z col nodo rimosso: "+z);
		System.out.println("Rimuovo l'elemento a da z che e': "+z.remove(a));
		System.out.println("z col nodo rimosso: "+z);
		System.out.println("Cerca l'elemento p: "+z.search(p));
		Binarytreesearch zzz=new Binarytreesearch(ttt, sss);
		System.out.println("Albero binario di ricerca zzz: "+zzz);
		System.out.println("Albero binario z: "+z);
		System.out.println("z+zzz: "+z.somma(zzz));
		System.out.println("z-zzz: "+z.differenza(zzz));
		System.out.println("Albero binario z: "+z);
		System.out.println("z*2: "+z.moltiplicazione(2));
		System.out.println("z/3: "+z.divisione(3));		
	}

}
